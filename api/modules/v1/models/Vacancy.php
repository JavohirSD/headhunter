<?php

namespace api\modules\v1\models;

use common\models\User;
use Yii;

/**
 * This is the model class for table "vacancy".
 *
 * @property int $id
 * @property string $title
 * @property int $position_id
 * @property int $salary
 * @property int $salary_unit
 * @property int $user_id
 * @property string $schedule
 * @property string|null $created_at
 * @property string|null $updated_at
 *
 * @property User $user
 * @property User[] $users
 * @property VacancyViews[] $vacancyViews
 */
class Vacancy extends \yii\db\ActiveRecord
{
    public int $views;
    public int $clicks;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'vacancy';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'position_id', 'salary', 'salary_unit', 'schedule'], 'required'],
            [['position_id', 'salary', 'salary_unit', 'user_id'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['title', 'schedule'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['user_id' => 'id']],
            [['user_id'], 'default', 'value'=> Yii::$app->user->id],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'position_id' => 'Position ID',
            'salary' => 'Salary',
            'salary_unit' => 'Salary Unit',
            'user_id' => 'User ID',
            'schedule' => 'Schedule',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function fields()
    {
        $fields = [
            'views',
            'clicks'
        ];

        return parent::fields() + $fields; // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery|UserQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    /**
     * Gets query for [[Users]].
     *
     * @return \yii\db\ActiveQuery|UserQuery
     */
    public function getUsers()
    {
        return $this->hasMany(User::class, ['id' => 'user_id'])->viaTable('vacancy_views', ['vacancy_id' => 'id']);
    }

    /**
     * Gets query for [[VacancyViews]].
     *
     * @return \yii\db\ActiveQuery|VacancyViewsQuery
     */
    public function getVacancyViews()
    {
        return $this->hasMany(VacancyViews::class, ['vacancy_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     * @return VacancyQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new VacancyQuery(get_called_class());
    }


    /**
     * Set skills and binds to the vacancy
     *
     * @param string $skills
     *
     * @return void
     */
    public function setSkills(string $skills = "")
    {
        if(mb_strlen($skills) > 1){
            $skills = explode(',',$skills);

            if(!empty($skills)){
                foreach ($skills as $skill){

                    $skl = Skills::findOrCreate($skill);

                    $model = new VacancyToSkill();
                    $model->skill_id   = $skl->id;
                    $model->vacancy_id = $this->id;
                    $model->save();
                }
            }
        }
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        $this->setSkills(Yii::$app->request->post()['skills']);
    }


    public function afterFind()
    {
        $this->position_id = Positions::findOne($this->position_id)?->title;
        $this->user_id     = User::findOne($this->user_id)?->username;
        $this->views       = VacancyViews::find()->where(['vacancy_id' => $this->id])?->count();
        $this->clicks      = VacancyClicks::find()->where(['vacancy_id' => $this->id])?->count();

        if(Yii::$app->controller->action->id == 'view'){
            VacancyViews::findOrCreate($this->id);
        }
    }
}
